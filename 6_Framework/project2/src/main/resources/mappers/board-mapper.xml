<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

	<!-- Board resultMap -->
	<resultMap type="Board" id="board_rm">
      <id property="boardNo" column="BOARD_NO"/>
      <result property="boardTitle" column="BOARD_TITLE"/>
      <result property="boardContent" column="BOARD_CONTENT"/>
      <result property="boardCreateDate" column="B_CREATE_DATE"/>
      <result property="boardUpdateDate" column="B_UPDATE_DATE"/>
      <result property="readCount" column="READ_COUNT"/>
      <result property="commentCount" column="COMMENT_COUNT"/>
      <result property="likeCount" column="LIKE_COUNT"/>
      <result property="memberNickname" column="MEMBER_NICKNAME"/>
      <result property="memberNo" column="MEMBER_NO"/>
      <result property="profileImage" column="PROFILE_IMG"/>
      <result property="thumbnail" column="THUMBNAIL"/>
      
      <!-- resultMap의 collection 태그 
      	-	조회 결과를 지정된 컬렉션 형태로 필드에 대입하는 태그
      	- 별도로 지정된 select 구문을 수행해서 수행 결과를
      	  해당 필드에 대입
      	  
      	  property : 대입될 필드명
      	  javaType : 컬렉션 객체 타입
      	  ofType : 제네릭(타입제한)
      	  select : 수행할 select 태그의 id
      	  column : select 수행 시 전달할 파라미터를 가지고있는 컬럼
    	 -->
      <collection property="imageList" 
      	javaType="java.util.ArrayList" ofType="BoardImage"
        select="selectImageList" 
        column="BOARD_NO"/>
        
      <collection property="commentList"  
       	javaType="java.util.ArrayList" ofType="Comment"
       	select="selectCommentList"
       	column="BOARD_NO"
      />
       
	</resultMap>
	
	
	<!-- BoardImage resultMap -->
	<resultMap type="BoardImage" id="boardImage_rm">
		<id property="imageNo" column="IMG_NO"/>
		<result property="imagePath" column="IMG_PATH"/>
		<result property="imageReName" column="IMG_RENAME"/>
		<result property="imageOriginal" column="IMG_ORIGINAL"/>
		<result property="imageOrder" column="IMG_ORDER"/>
		<result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	
	
	<!-- Comment resultMap -->
	<resultMap type="Comment" id="comment_rm">
		<id property="commentNo" column="COMMENT_NO"/>
		<result property="commentContent" column="COMMENT_CONTENT"/>
		<result property="commentCreateDate" column="C_CREATE_DATE"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="commentDeleteFlag" column="COMMENT_DEL_FL"/>
		<result property="parentNo" column="PARENT_NO"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		<result property="profileImage" column="PROFILE_IMG"/>
		<result property="childCheck" column="CHILD_CHECK"/>
	</resultMap>
	
	
	
	
	
	
	<!-- 게시판 이름 목록 조회 -->
	<!--  resultType="map"  : 
		조회된 한 행의 결과를 컬럼명:값 형식으로 Map에 저장-->
	<select id="selectBoardType" resultType="map">
		SELECT * FROM BOARD_TYPE
		ORDER BY 1
	</select>
	

	<!-- 게시글 수 조회 -->
	<select id="getListCount" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		WHERE BOARD_CODE = #{boardCode}
		AND BOARD_DEL_FL = 'N'
	</select>



	<!-- 특정 게시판 목록 조회 -->
	<select id="selectBoardList" parameterType="_int" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
		  <![CDATA[
			CASE  
		      WHEN SYSDATE - B_CREATE_DATE < 1/24/60
		      THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
		      WHEN SYSDATE - B_CREATE_DATE < 1/24
		      THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
		      WHEN SYSDATE - B_CREATE_DATE < 1
		      THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
		      ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
		   END B_CREATE_DATE,
		   ]]>
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO 
			 AND COMMENT_DEL_FL = 'N') COMMENT_COUNT,
			 
			(SELECT COUNT(*) FROM BOARD_LIKE L
			 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
			(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
			 WHERE IMG_ORDER = 0
			 AND I.BOARD_NO = B.BOARD_NO) THUMBNAIL
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_CODE = #{boardCode}
		AND BOARD_DEL_FL = 'N'
		ORDER BY BOARD_NO DESC
	</select>
	
	
	<!-- 게시글 상세 조회 -->
	<select id="selectBoardDetail" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, READ_COUNT, 
			TO_CHAR(B_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_CREATE_DATE,
			TO_CHAR(B_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_UPDATE_DATE,
			MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,
			(SELECT COUNT(*) FROM BOARD_LIKE L
			 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNo}
		AND BOARD_DEL_FL = 'N'
	</select>
	
	<!-- 특정 게시글의 이미지 목록 조회 -->
	<select id="selectImageList" resultMap="boardImage_rm">
		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
	</select>
	
	<!-- 특정 게시글의 댓글 목록 조회 -->
	<!-- CONNECT_BY_ISLEAF : 자식 있으면 0, 없으면 1 -->
	<select id="selectCommentList" resultMap="comment_rm">
		<!-- SELECT LEVEL, C.* FROM
			(SELECT COMMENT_NO, COMMENT_CONTENT,
				TO_CHAR(C_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') C_CREATE_DATE,
				BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,
				PARENT_NO, COMMENT_DEL_FL
			FROM "COMMENT"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE BOARD_NO = #{boardNo}
			AND COMMENT_DEL_FL = 'N'
			) C
		START WITH PARENT_NO IS NULL 
		CONNECT BY PRIOR COMMENT_NO = PARENT_NO 
		ORDER SIBLINGS BY COMMENT_NO -->
		
		SELECT LEVEL, CONNECT_BY_ISLEAF AS CHILD_CHECK, C.* FROM
			(SELECT COMMENT_NO, COMMENT_CONTENT,
				TO_CHAR(C_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') C_CREATE_DATE,
			BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,
			PARENT_NO, COMMENT_DEL_FL
			FROM "COMMENT"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE BOARD_NO = #{boardNo}) C
		START WITH PARENT_NO IS NULL 
		CONNECT BY PRIOR COMMENT_NO = PARENT_NO 
		ORDER SIBLINGS BY COMMENT_NO
	</select>
	
	<!-- 조회 수 증가 -->
	<update id="updateReadCount">
		UPDATE BOARD SET
		READ_COUNT = READ_COUNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 좋아요 여부 체크 -->
	<select id="boardLikeCheck"  resultType="_int">
		SELECT COUNT(*) FROM BOARD_LIKE
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 좋아요 수 증가(INSERT) -->
	<insert id="boardLikeUp">
		INSERT INTO BOARD_LIKE VALUES(#{boardNo}, #{memberNo})
	</insert>
	
	
	<!-- 좋아요 수 감소(DELETE) -->
	<delete id="boardLikeDown">
		DELETE FROM BOARD_LIKE
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</delete>

	<!-- 게시글 삭제 -->
	<update id="boardDelete">
		UPDATE BOARD SET
		BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO = #{boardNo}
	</update>


	<!-- 게시글 삽입 -->

	<!--  
		useGeneratedKeys 속성 : DB 내부적으로 생성한 키(ex. 시퀀스)를 사용
		useGeneratedKeys = "true" : JDBC getGeneratedKeys() 메서드 사용 허용
		
		* 마이바티스의 동적 SQL *
		- SQL 구문에 작성되는 태그로
		  프로그램 수행 중 추가적인 SQL 수행 / SQL 형태의 변형 할 수 있음.
		  (마마이바티스 기능 중 가장 강력한 기능)
		  
		  
		  * 동적 SQL <selectKey>
		  <selectKey> : INSERT/UPDATE에 사용된 키를 
		  					    원하는 변수/필드에 담아서 반환하는 태그
		  
		  order : 메인 SQL이 수행되기 전(BEFORE) 또는 후(AFTER)에
		  				<selectKey>의 SQL이 수행되도록 순서를 지정하는 속성		  
		  
		  keyProperty : key를 담을 변수를 지정하는 속성  
	-->

	<insert id="boardWrite"  parameterType="Board" useGeneratedKeys="true">
	
		<selectKey keyProperty="boardNo" resultType="_int" order="BEFORE">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
	
		INSERT INTO BOARD
		VALUES(#{boardNo}, 
			   #{boardTitle}, #{boardContent},
			   DEFAULT, DEFAULT, DEFAULT, DEFAULT, 
			   #{memberNo}, #{boardCode} )
	</insert>


	<!-- 게시글 첨부 이미지 삽입(리스트형식) -->
	<!-- 
		동적 SQL <foreach>
		- 특정 SQL 구문을 반복할 때 사용
		- collection : 반복할 객체의 타입(list, set, map, array....) 
		- item : collection 객체에서 하나씩 순서대로 꺼낸 요소
		- index : 현재 인덱스를 나타내는 변수
		- open : 반복 전 출력할 구문
		- close : 반복이 끝난 후 출력할 구문 
		- separator : 분리 기호(반복 사이 구분자)
	 -->
	<insert id="insertBoardImageList" parameterType="list">
		INSERT INTO BOARD_IMG 
		SELECT SEQ_IMG_NO.NEXTVAL IMG_NO, A.* FROM
		
		<foreach collection="list" item="img" 
			open="(" close=") A" separator="UNION ALL">
			SELECT #{img.imagePath} IMG_PATH,
				     #{img.imageReName} IMG_RENAME,
				     #{img.imageOriginal} IMG_ORIGINAL,
				     #{img.imageOrder}  IMG_ORDER,
				     #{img.boardNo} BOARD_NO
			FROM DUAL
		</foreach>
	</insert>
	
	
	<!-- 게시글 수정 -->
	<update id="boardUpdate">
		UPDATE BOARD SET
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent}
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시글 이미지 삭제 -->
	<!-- 
		#{key} == 'value' (양쪽 홑따옴표 추가)
			-> PreparedStatement (삽입, 조건절의 값)
		
		${key} == value (따옴표 X)
			-> Statement (SQL 일부)
	-->
	
	<delete id="boardImageDelete">
		DELETE FROM BOARD_IMG
		${condition}
	</delete>
	
	
	<!-- 이미지 수정 -->
	<update id="boardImageUpdate">
		UPDATE BOARD_IMG SET
		IMG_RENAME = #{imageReName},
		IMG_ORIGINAL = #{imageOriginal}
		WHERE BOARD_NO = #{boardNo}
		AND IMG_ORDER = #{imageOrder}
	</update>
	
	<!-- 이미지 삽입 -->
	<insert id="boardImageInsert">
		INSERT INTO BOARD_IMG VALUES(SEQ_IMG_NO.NEXTVAL,
		#{imagePath}, #{imageReName}, #{imageOriginal}, #{imageOrder}, #{boardNo})
	</insert>


	<!-- 검색 조건 일치 게시글 수 조회 -->
	<!-- 
		마이바티스 동적 SQL <if> / <choose>, <when>, <otherwise>
	 -->
	<select id="getListCount_search" resultType="_int">
		SELECT COUNT(*) 
		FROM "BOARD"
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_CODE = #{boardCode}
		AND BOARD_DEL_FL = 'N'
		
		<!-- 검색어가 있을 경우 -->
		<if test='query != null and query != ""'>
			
			<choose>
				<when test='key == "t"'>
					AND BOARD_TITLE LIKE '%${query}%'
				</when>
				
				<when test='key == "c"'>
					AND BOARD_CONTENT LIKE '%${query}%'
				</when>
				
				<when test='key == "tc"'>
					AND ( BOARD_TITLE LIKE '%${query}%' 
							OR BOARD_CONTENT LIKE '%${query}%')
				</when>
				
				<otherwise>
					AND MEMBER_NICKNAME LIKE '%${query}%'
				</otherwise>
			</choose>
		</if>
	</select>
	
	
	<!-- 검색 조건 일치 게시글 목록 조회 -->
	<select id="selectBoardList_search" parameterType="_int" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
		  <![CDATA[
			CASE  
		      WHEN SYSDATE - B_CREATE_DATE < 1/24/60
		      THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
		      WHEN SYSDATE - B_CREATE_DATE < 1/24
		      THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
		      WHEN SYSDATE - B_CREATE_DATE < 1
		      THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
		      ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
		   END B_CREATE_DATE,
		   ]]>
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO
			 AND COMMENT_DEL_FL = 'N') COMMENT_COUNT,
			(SELECT COUNT(*) FROM BOARD_LIKE L
			 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
			(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
			 WHERE IMG_ORDER = 0
			 AND I.BOARD_NO = B.BOARD_NO) THUMBNAIL
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_CODE = #{boardCode}
		AND BOARD_DEL_FL = 'N'
		
		<!-- 검색어가 있을 경우 -->
		<if test='query != null and query != ""'>
			
			<choose>
				<when test='key == "t"'>
					AND BOARD_TITLE LIKE '%${query}%'
				</when>
				
				<when test='key == "c"'>
					AND BOARD_CONTENT LIKE '%${query}%'
				</when>
				
				<when test='key == "tc"'>
					AND ( BOARD_TITLE LIKE '%${query}%' 
							OR BOARD_CONTENT LIKE '%${query}%')
				</when>
				
				<otherwise>
					AND MEMBER_NICKNAME LIKE '%${query}%'
				</otherwise>
			</choose>
		</if>
		ORDER BY BOARD_NO DESC
	</select>



</mapper>



